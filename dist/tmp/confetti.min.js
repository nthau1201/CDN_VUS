function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
}

function playRandomDirection() {
    confetti({
        angle: randomInRange(60, 135),
        spread: randomInRange(55, 75),
        particleCount: randomInRange(50, 100),
        origin: { y: 0.6 }
    });
}

function playFirework($duration, $color_effect) {
    if (isNaN($duration)) {
        $duration = 3;
    }
    var duration = $duration * 1000;
    var animationEnd = Date.now() + duration;
    var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    var colors = ['#ba141a', '#ffffff'];
    try {
        if (typeof ($color_effect) !== "undefined" &&
            typeof ($color_effect.firework) !== "undefined") {
            colors = $color_effect.firework;
        }
    } catch (ex) {
        console.log(ex);
    }
    var interval = setInterval(function () {
        var timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
            return clearInterval(interval);
        }

        var particleCount = 50 * (timeLeft / duration);
        // since particles fall down, start a bit higher than random
        confetti(Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
        }));
        confetti(Object.assign({}, defaults, {
            particleCount,
            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
        }));
    }, 250);
}

function playSchoolPride($duration, $color_effect) {
    if (isNaN($duration)) {
        $duration = 5;
    }
    var colors = ['#ba141a', '#ffffff'];

    try {
        if (typeof ($color_effect) !== "undefined" &&
            typeof ($color_effect.school_pride) !== "undefined") {
            colors = $color_effect.school_pride;
        }
    } catch (ex) {
        console.log(ex);
    }

    var end = Date.now() + ($duration * 1000);
    // go Buckeyes!
    (function frame() {
        confetti({
            particleCount: 2,
            angle: 60,
            spread: 55,
            origin: { x: 0 },
            colors: colors
        });
        confetti({
            particleCount: 2,
            angle: 120,
            spread: 55,
            origin: { x: 1 },
            colors: colors
        });
        if (Date.now() < end) {
            requestAnimationFrame(frame);
        }
    }());
}

function playRealistic(count, position) {
    if (isNaN(count)) {
        count = 100;
    }
    if (isNaN(position)) {
        position = 0.7;
    }
    var defaults = {
        origin: { y: position }
    };

    function fire(particleRatio, opts) {
        confetti(Object.assign({}, defaults, opts, {
            particleCount: Math.floor(count * particleRatio),
        }));
    }

    fire(0.25, {
        spread: 26,
        startVelocity: 55,
    });
    fire(0.2, {
        spread: 60,
    });
    fire(0.35, {
        spread: 100,
        decay: 0.91,
        scalar: 0.8
    });
    fire(0.1, {
        spread: 120,
        startVelocity: 25,
        decay: 0.92,
        scalar: 1.2
    });
    fire(0.1, {
        spread: 120,
        startVelocity: 45,
    });
}

function playSnow($duration, $color_effect) {
    if (isNaN($duration)) {
        $duration = 20;
    }
    var colors = ['#ffffff', '#ffffff'];

    try {

        if (typeof ($color_effect) !== "undefined" && typeof ($color_effect.snow) !== "undefined") {
            colors = $color_effect.snow;
        }
    } catch (ex) {
        console.log(ex);
    }

    var duration = $duration * 1000;
    var animationEnd = Date.now() + duration;
    var skew = 1;
    (function frame() {
        var timeLeft = animationEnd - Date.now();
        var ticks = Math.max(200, 500 * (timeLeft / duration));
        skew = Math.max(0.8, skew - 0.001);
        confetti({
            particleCount: 1,
            startVelocity: 0,
            ticks: ticks,
            gravity: 0.5,
            origin: {
                x: Math.random(),
                // since particles fall down, skew start toward the top
                y: (Math.random() * skew) - 0.2
            },
            colors: ["#ffffff"],
            shapes: ["circle"],
            gravity: randomInRange(0.4, 0.6),
            scalar: randomInRange(0.4, 1),
            drift: randomInRange(-0.4, 0.4),

        });
        if (timeLeft > 0) {
            requestAnimationFrame(frame);
        }
    }());
}